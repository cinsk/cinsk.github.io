<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Seong-Kook Shin's Little World (Posts about nc)</title><link>http://www.cinsk.org/</link><description></description><atom:link href="http://www.cinsk.org/categories/nc.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:cinsky at gmail.com"&gt;Seong-Kook Shin&lt;/a&gt; </copyright><lastBuildDate>Tue, 06 Mar 2018 08:00:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Wait until TCP port opened using bash and nc</title><link>http://www.cinsk.org/posts/bash-wait-tcp-port.org/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Recently, I wrote a shell script which interacts with a TCP
server. Since the script took charge of launching the server,
sometimes my script fails because the server did not open the socket
yet.
&lt;/p&gt;

&lt;p&gt;
To come up with this problem, I used to wait certain amount of time
using &lt;code&gt;sleep(1)&lt;/code&gt; like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# launch the server which automatically daemonizes itself.&lt;/span&gt;
start-server 

&lt;span class="c1"&gt;# one second is enough for my system.&lt;/span&gt;
sleep &lt;span class="m"&gt;1&lt;/span&gt;

client &lt;span class="k"&gt;do&lt;/span&gt; something
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It was fine for my system, until I realized this method would not
work on slow machine. Worse, when my system in a heavy-load, my
system also failed to run above script successfully.
&lt;/p&gt;

&lt;p&gt;
I would solve this problem by raising the amount of seconds
sleeping, but I do not want to wait more on my relatively fast
system.
&lt;/p&gt;

&lt;p&gt;
Then I realized that netcat (a.k.a. &lt;code&gt;nc&lt;/code&gt;) provides such feature with
the "-z" option.
&lt;/p&gt;

&lt;p&gt;
To test whether &lt;code&gt;www.cinsk.org&lt;/code&gt; (TCP port 80) is opened, I can launch
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In BSD-like (MacOS) system&lt;/span&gt;
$ nc -z www.cinsk.org &lt;span class="m"&gt;80&lt;/span&gt;
Connection to www.cinsk.org &lt;span class="m"&gt;80&lt;/span&gt; port &lt;span class="o"&gt;[&lt;/span&gt;tcp/http&lt;span class="o"&gt;]&lt;/span&gt; succeeded!
$ _

&lt;span class="c1"&gt;# On my Linux system, no message but just return zero on success&lt;/span&gt;
$ nc -z www.cinsk.org &lt;span class="m"&gt;80&lt;/span&gt;
$ _
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then I found another problem. Suppose that the firewall drops all
packets for that port. Since by default, netcat(&lt;code&gt;nc&lt;/code&gt;) will wait
permanently until the port is open, the script that uses netcat(&lt;code&gt;nc&lt;/code&gt;)
will not return.
&lt;/p&gt;

&lt;p&gt;
Thanks to the rich interface of netcat, it provides another option
"-w" to specify the amount of time it will wait. The problem is,
MacOS nc (BSD) does not work with "-w" option if the firewall drops
all packets. Installing GNU version will solve this problem. (by the
command "&lt;code&gt;brew install netcat&lt;/code&gt;")
&lt;/p&gt;

&lt;p&gt;
Finally, I wrote wait4tcp.sh to lessen the burden for others.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Wait until port 80 8080 5984 are opened&lt;/span&gt;
$ ./wait4tcp.sh HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="m"&gt;5984&lt;/span&gt;

&lt;span class="c1"&gt;# The same as above, except it will retry only 10 times per each port.&lt;/span&gt;
$ ./wait4tcp.sh -w &lt;span class="m"&gt;10&lt;/span&gt; HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="m"&gt;5984&lt;/span&gt;

&lt;span class="c1"&gt;# Wait until port 80 is closed&lt;/span&gt;
$ ./wait4tcp.sh -c HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt;

&lt;span class="c1"&gt;# The same as above, except it will retry permanently.&lt;/span&gt;
$ ./wait4tcp.sh -w -1 -c HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt;

&lt;span class="c1"&gt;# With the bash brace expansion, wait for port range 6379..6383 are opened&lt;/span&gt;
$ ./wait4tcp.sh HOSTNAME &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;..6383&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By default, wait4tcp.sh will retry 100 times per each port. Retrying
100 times is done less than 1 second in my system. Using "-w -1"
option will retry permanently.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Updated&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Recently, I read valuable article from &lt;a href="http://www.catonmat.net/blog/tcp-port-scanner-in-bash/"&gt;TCP Port Scanner in Bash&lt;/a&gt;,
and found that bash provides special filenames for redirections.
&lt;/p&gt;

&lt;p&gt;
As Peteris suggested, I changed to bash special filenames and
&lt;code&gt;timeout(1)&lt;/code&gt; so that there is no dependency to netcat(&lt;code&gt;nc&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Here is the full source code for &lt;code&gt;wait4tcp.sh&lt;/code&gt;:
&lt;/p&gt;

&lt;script src="https://gist.github.com/3769111.js"&gt; &lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bash</category><category>nc</category><category>netcat</category><category>tcp</category><guid>http://www.cinsk.org/posts/bash-wait-tcp-port.org/index.html</guid><pubDate>Sun, 23 Sep 2012 08:00:00 GMT</pubDate></item></channel></rss>