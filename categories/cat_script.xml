<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Seong-Kook Shin's Little World (Posts about script)</title><link>http://www.cinsk.org/</link><description></description><atom:link href="http://www.cinsk.org/categories/cat_script.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:cinsky at gmail.com"&gt;Seong-Kook Shin&lt;/a&gt; </copyright><lastBuildDate>Tue, 06 Mar 2018 08:00:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Detect staled NFS mount</title><link>http://www.cinsk.org/posts/nfs-detect-stale/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Check stale NFS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here's a simple script to check whether the given directory (NFS mount point)
is stale.
&lt;/p&gt;

&lt;script src="https://gist.github.com/cinsk/840ed553905cb6e8f0ae.js"&gt;⁠script&gt;

&lt;p&gt;
There are three points that needs some explanation here.
&lt;/p&gt;

&lt;p&gt;
First, since any command that access the NFS file system would block
(unresponsive) iff the NFS is stale, I am using &lt;code&gt;read -t N&lt;/code&gt; for the
timeout.
&lt;/p&gt;

&lt;p&gt;
Second, I used process substitution feature of bash, &lt;code&gt;&amp;lt;(list)&lt;/code&gt; form.
Basically, &lt;code&gt;read -t 1 &amp;lt; &amp;lt;(...)&lt;/code&gt; will timeout after 1 second unless
=⁠&amp;#x2026;= part finished within the timeout.  &lt;i&gt;bash&lt;/i&gt; will create a new
subshell to execute /⁠list/ in &lt;code&gt;&amp;lt;(list)&lt;/code&gt; form.  The problem is, if
any of &lt;i&gt;list&lt;/i&gt; will access the stale NFS, the command will hang,
which makes the subshell also will hang.  Even if the calling shell
script finished, the subshell would not terminated, leaving the
process in &lt;i&gt;interruptible sleep&lt;/i&gt; state.
&lt;/p&gt;

&lt;p&gt;
To prevent this, I recorded the sub-shell PID using &lt;code&gt;$BASHPID&lt;/code&gt; in
&lt;code&gt;&amp;lt;(list)&lt;/code&gt; form.  After =⁠read= command, I deleted all possible
children of the subshell and the subshell itself.  Note that using
&lt;code&gt;$$&lt;/code&gt; won't work in &lt;code&gt;&amp;lt;(list)&lt;/code&gt; form.  =⁠$$= represents the mother
shell's PID, not the sub-shell's.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;/script&gt;&lt;/div&gt;&lt;/div&gt;</description><category>nfs</category><category>script</category><category>stale</category><guid>http://www.cinsk.org/posts/nfs-detect-stale/index.html</guid><pubDate>Wed, 02 Jul 2014 08:00:00 GMT</pubDate></item><item><title>A script to create Redis Cluster using GNU screen(1)</title><link>http://www.cinsk.org/posts/screen-redis-replica/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Easy way to setup the local redis replication using GNU screen(1)
&lt;/p&gt;

&lt;p&gt;
One of my reponsibility is to write easy client library for Redis in C
and Java.  There are already well-known client C library, &lt;a href="https://github.com/redis/hiredis"&gt;hiredis&lt;/a&gt; and
Java library, &lt;a href="https://github.com/xetorthio/jedis"&gt;jedis&lt;/a&gt;.  At the time of development, none of these
support our Redis replication cluster.  I'll write later about the
client libraries that support replication.
&lt;/p&gt;

&lt;p&gt;
Anyway, during the development, I need to launch simple redis cluster,
which consists of 1 master and 2 slaves.  It is tiresome job to setup
the configuration of master and slaves, and it is very likely to
commit a mistake.
&lt;/p&gt;

&lt;p&gt;
Thus, I wrote a small shell script (called &lt;code&gt;redis-replica.sh&lt;/code&gt;) to
launch redis cluster locally.  Internally, it uses &lt;a href="https://www.gnu.org/software/screen/"&gt;GNU screen&lt;/a&gt; to
create multiple shell to launch required processes:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="right"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="right"&gt;shell no.&lt;/th&gt;
&lt;th scope="col" class="left"&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="right"&gt;0&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-sentinel&lt;/i&gt;, listening 26379&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;1&lt;/td&gt;
&lt;td class="left"&gt;redis monitor to the sentinel&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;2&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-cli&lt;/i&gt; to the sentinel&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;3&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-server&lt;/i&gt; master, listening 6379&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;4&lt;/td&gt;
&lt;td class="left"&gt;redis monitor to the master&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;5&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-cli&lt;/i&gt; to the master&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;6&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-server&lt;/i&gt; slave#1, listening 6380&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;7&lt;/td&gt;
&lt;td class="left"&gt;redis monitor to the slave#1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;8&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-cli&lt;/i&gt; to the slave#1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;9&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-server&lt;/i&gt; slave#2, listening 6381&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;10&lt;/td&gt;
&lt;td class="left"&gt;redis monitor to the slave#2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;11&lt;/td&gt;
&lt;td class="left"&gt;&lt;i&gt;redis-cli&lt;/i&gt; to the slave#2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Since the master and slaves are managed by the &lt;i&gt;sentinel&lt;/i&gt; process, if
you shutdown the master, one of the slaves will be promoted to new
master.
&lt;/p&gt;

&lt;p&gt;
This way, you can easily experiment and test your client software or
libraries.
&lt;/p&gt;

&lt;p&gt;
Here is the source code of &lt;code&gt;redis-replica.sh&lt;/code&gt;:
&lt;/p&gt;

&lt;script src="http://gist-it.appspot.com/github/cinsk/snippets/blob/master/redis-replica.sh"&gt;&lt;/script&gt;</description><category>cluster</category><category>redis</category><category>replica</category><category>screen</category><category>script</category><category>sentinel</category><guid>http://www.cinsk.org/posts/screen-redis-replica/index.html</guid><pubDate>Fri, 22 Nov 2013 08:00:00 GMT</pubDate></item><item><title>How I kill a process with suspicious TCP CLOSE_WAIT</title><link>http://www.cinsk.org/posts/tcp-close-wait-killer/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
During our server-side application development, we encontered a lot of
connections are in CLOSE&lt;sub&gt;WAIT&lt;/sub&gt; state, so that our server process is out
of file descriptors.  We are in the middle of development of a client
application that runs in the mobile androids, and the server-side
application that runs in a cloud infrastrure.
&lt;/p&gt;

&lt;p&gt;
I'm in the server-side team, and our team is focusing on the
development of server-side.  Our server-side have multiple front-end
server that expose the interface for the clients.  Front-end servers
are like load-balancers, they dispatch the client requests to the one
of the several back-end workers.  Since we're in the middle of the
development, our front-end servers and back-end servers have a couple
of bugs in them.  They sometimes made the server crash, even hang
unpredictively.
&lt;/p&gt;

&lt;p&gt;
Unfortunately, while we were tring to stablize our server
applications, the client team needed a prototype server cluster, so
that they can develop their client application and test the
interaction between client and the front-end.
Personally, I don't want to provide our prototype servers to the client
team until the server-side is stablized, but the client team also
need to hurry, to meet the dead-line, so we have no choice but to
provide them still-unstable-servers.
&lt;/p&gt;

&lt;p&gt;
The biggest problem was, the server application leaves &lt;code&gt;CLOSE_WAIT&lt;/code&gt;
state TCP connections on unexpected network situation.  So, after a
couple of hours, the server process ran out of file descriptors,
denying client requests.  Since we use sophiscated third-party network
library, it would take some times to fix the problem.
&lt;/p&gt;

&lt;p&gt;
So, I need some kind of watchdog, which periodically check whether the
server process leaves &lt;code&gt;CLOSE_WAIT&lt;/code&gt; connections, and kill them, leave
some logs, and so on.  Our server application is managed by init(1)
like launcher, so when the server processes are terminated, the
launcher automatically raise them.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Implementation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I was in hurry to implement this wachdog program, so I decided to
write small &lt;i&gt;bash&lt;/i&gt; script, but later changed to Ruby script.
Fortunately, all of our servers already have Ruby 1.8 installed.
&lt;/p&gt;

&lt;p&gt;
At some time slice, the output of the &lt;code&gt;netstat(1)&lt;/code&gt; would like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ netstat -ntp
...
tcp  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.149.8.221:46271  &lt;span class="m"&gt;54&lt;/span&gt;.235.151.255:6379  ESTABLISHED &lt;span class="m"&gt;16125&lt;/span&gt;/fe-server
tcp  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.149.8.221:46283  &lt;span class="m"&gt;54&lt;/span&gt;.235.151.255:6379  ESTABLISHED &lt;span class="m"&gt;16118&lt;/span&gt;/fe-server          
tcp  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.149.8.221:46267  &lt;span class="m"&gt;54&lt;/span&gt;.235.151.255:6379  ESTABLISHED &lt;span class="m"&gt;16120&lt;/span&gt;/fe-server          
tcp  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.149.8.221:35250  &lt;span class="m"&gt;10&lt;/span&gt;.158.95.68:58964   CLOSE_WAIT  &lt;span class="m"&gt;16063&lt;/span&gt;/fe-server   
tcp  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.149.8.221:43557  &lt;span class="m"&gt;10&lt;/span&gt;.147.191.96:52421  ESTABLISHED &lt;span class="m"&gt;16063&lt;/span&gt;/fe-server
tcp  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;.149.8.221:8010   &lt;span class="m"&gt;107&lt;/span&gt;.22.161.62:37126  CLOSE_WAIT  -
...
$ _
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The &lt;code&gt;netstat(1)&lt;/code&gt; from net-tools, accept &lt;i&gt;-n&lt;/i&gt; option, indicates to use
numerical addresses and ports, &lt;i&gt;-t&lt;/i&gt; options indicates to show only TCP
connections, and &lt;i&gt;-p&lt;/i&gt; options to show the related PID and program names.
&lt;/p&gt;

&lt;p&gt;
It looks trival to catch the PID of the process that has one or more
&lt;code&gt;CLOSE_WAIT&lt;/code&gt; connections.  One thing to keep in mind is, &lt;code&gt;netstat(1)&lt;/code&gt;
sometimes displays "-" in the PID/PROGRAM field.  I don't have
enough time when &lt;code&gt;netstat(1)&lt;/code&gt; shows "-", but fortunately, &lt;code&gt;fuser(1)&lt;/code&gt;
can identify the owner PID of the connection.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fuser -n tcp &lt;span class="m"&gt;8010&lt;/span&gt;
&lt;span class="m"&gt;35250&lt;/span&gt;/tcp:           &lt;span class="m"&gt;16063&lt;/span&gt;
$ fuser -n tcp &lt;span class="m"&gt;8010&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
 &lt;span class="m"&gt;16063&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
My first implementation was, just simply count the number of
&lt;code&gt;CLOSE_WAIT&lt;/code&gt; connections per process, and &lt;code&gt;kill(1) $PID&lt;/code&gt; if the
process has more than N &lt;code&gt;CLOSE_WAIT&lt;/code&gt; connections.
&lt;/p&gt;

&lt;p&gt;
The limitation of the first implementation is, it may kill the
process with &lt;code&gt;CLOSE_WAIT&lt;/code&gt; connection that the process just about to
&lt;code&gt;close(2)&lt;/code&gt; it.
&lt;/p&gt;

&lt;p&gt;
So the second implementation work like this:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;save the connection information (source address:port, destination
address:port) per process as a &lt;i&gt;set&lt;/i&gt;-like container
&lt;/li&gt;
&lt;li&gt;Wait for certain amount of the time
&lt;/li&gt;
&lt;li&gt;save the connection information again, in another &lt;i&gt;set&lt;/i&gt;-like
container.
&lt;/li&gt;
&lt;li&gt;Get the intersection of the two &lt;i&gt;set&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;If the number of elements in the intersection exceeds N, kill the
process.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I couldn't come up with a good implementation of &lt;i&gt;set&lt;/i&gt;-like container
in &lt;code&gt;bash(1)&lt;/code&gt;, so I re-implement from the scratch with &lt;code&gt;ruby(1)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
After few hours, another problem arised.  Some server processes,
goes coma, and does not adhere to &lt;code&gt;SIGTERM&lt;/code&gt;.  We can only kill them with
&lt;code&gt;SIGKILL&lt;/code&gt;, so I modified the killing line like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="nv"&gt;$pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; sleep &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;kill&lt;/span&gt; -0 &lt;span class="nv"&gt;$pid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;kill&lt;/span&gt; -9 &lt;span class="nv"&gt;$pid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This line, first send &lt;code&gt;SIGTERM&lt;/code&gt; to the $pid, then sleep for 2
seconds, and if it still can send a signal to the process (in other
words, if the process is still alive), send &lt;code&gt;SIGKILL&lt;/code&gt; to the $pid.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Usage&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I named the script, &lt;code&gt;resreap&lt;/code&gt;.  The reason was, we call our server
processes as resources, so it stands for 'RESource REAPer'.  The
full source code is available from &lt;a href="https://github.com/cinsk/snippets/blob/master/resreap"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
With some extra features, my script, called &lt;code&gt;resreap&lt;/code&gt;, can accept
following options:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./resreap --help
Kill processes that have enough CLOSE_WAIT socket&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
Usage: resreap &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt;

    -f PAT        Kill only processes whose &lt;span class="nb"&gt;command&lt;/span&gt; matches PAT
    -F HOST:PORT  Ignore &lt;span class="k"&gt;if&lt;/span&gt; foreign endpoint matches to HOST:PORT
		  HOST should be in IPv4 numerical notation.

    -l N          If a process has more than or equal to N CLOSE_WAIT
		  socket&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, it will be killed with a signal
		  &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    -i N          Set sleep interval between checks in seconds
		  &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    -c CMD        Before sending a signal, execute CMD in the shell,
		  If this CMD returns non-zero returns, the process
		  will not receive any signal.

    -s SIG        Set the signal name &lt;span class="o"&gt;(&lt;/span&gt;e.g. TERM&lt;span class="o"&gt;)&lt;/span&gt; that will be send
		  to a process &lt;span class="o"&gt;(&lt;/span&gt;default: TERM&lt;span class="o"&gt;)&lt;/span&gt;
    -w SEC        Set the waiting &lt;span class="nb"&gt;time&lt;/span&gt; in seconds between the signal and
		  SIGKILL &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    -d            dry run, no &lt;span class="nb"&gt;kill&lt;/span&gt;
    -D            debug mode

    -h            show this poor &lt;span class="nb"&gt;help&lt;/span&gt; messages and &lt;span class="nb"&gt;exit&lt;/span&gt;
    -v            show version information and &lt;span class="nb"&gt;exit&lt;/span&gt;

Note that &lt;span class="k"&gt;if&lt;/span&gt; a process receives the signal, and the process is alive
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; second&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, the process will receive SIGKILL.

If you are going to use &lt;span class="s2"&gt;"-f"&lt;/span&gt; option, I recommend to try &lt;span class="s2"&gt;"-d -D"&lt;/span&gt; option
first.  If you get the pid of the culprit process, try to get the
&lt;span class="nb"&gt;command&lt;/span&gt; name by &lt;span class="s2"&gt;"ps -p PID -o command="&lt;/span&gt; where PID is the pid of that
process.

You could send two signal&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; before sending SIGKILL using &lt;span class="s1"&gt;'-S'&lt;/span&gt; option.
This can be useful since some JVM print stacktrace on SIGQUIT.

$ _
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For example, if you want to kill a process if it has more than 2
&lt;code&gt;CLOSE_WAIT&lt;/code&gt; connections, and you only care for java program, then you
can do:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./resreap -l &lt;span class="m"&gt;2&lt;/span&gt; -f ^java
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Plus, if you want to ignore &lt;code&gt;CLOSE_WAIT&lt;/code&gt; connection on 127.0.0.1:2049,
you could do:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./resreap -F &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:2049
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I really hope that we don't need to use this awful script for our
servers. :)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>close_wait</category><category>deamon</category><category>kill</category><category>network</category><category>tcp</category><guid>http://www.cinsk.org/posts/tcp-close-wait-killer/index.html</guid><pubDate>Wed, 10 Jul 2013 08:00:00 GMT</pubDate></item><item><title>Parallel commands execution using GNU screen</title><link>http://www.cinsk.org/posts/screen-parallel-execution/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
I have been working on to develop large-scale web application, which
deals with a lot of image files. To test the application, we need a
huge number of large (the resolution should be higher than 640x480)
images. Since we didn't have lots of samples, I decided to grab from
&lt;a href="http://images.google.com/"&gt;http://images.google.com/&lt;/a&gt;. For my own execuse, the testing will be
done in private network, which makes me less obligation for the
copyright issue.
&lt;/p&gt;

&lt;p&gt;
The image archiving job was simple. I create a small shell script that
extracts actual image URL from the saved Google images result, and
saved that file as images.lst. Each line of that file contains image
URL. Then I create another script that reads URL one by one, and &lt;a href="http://www.gnu.org/software/wget"&gt;wget&lt;/a&gt;
the image to the local storage, and produce several thumbnails using
&lt;a href="http://www.imagemagick.org/"&gt;ImageMagick&lt;/a&gt;. So the whole process can be describe as:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat images.lst &lt;span class="p"&gt;|&lt;/span&gt; ./image-downloader.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I intended to download around 1000 images, and since it uses just one
thread of execution, it will takes for a while. At that time, I was
beginning to wonder, "It would be great if there is an utility that
automatically divide the input data file into specified number of
pieces, then execute the command that I specified for each piece."
&lt;/p&gt;

&lt;p&gt;
I instantly remembered that there is a tool called &lt;a href="http://www.gnu.org/software/parallel/"&gt;parallel&lt;/a&gt;, but I
decided to make my own. There is a reason to build from scratch:
&lt;/p&gt;

&lt;p&gt;
The work job program, which will deal with dividened piece, is not
matured program mostly. This means that I need to watch the progress
of each job process output, and I need to fix it in quick-and-dirty
way.  Similar to previous reason, sometimes, I need to analyze the
output of the process at the run-time.  Needs a 'detatched from tty'
feature, so that I can launch the whole process in remote and can
forget it for a while.  All the reasons makes me to think, it would be
great if I can create a script (I named it, screen-parallel.sh) to use
GNU screen to do the parallel jobs. For example, if I specified the
concurrency level to 10, then screen-parallel.sh will divide the input
into 10 pieces, and will create 10 screen windows, and execute the
command that I specified per piece.
&lt;/p&gt;

&lt;p&gt;
For example, in the beginning of the article, I used 
"&lt;code&gt;cat images.lst | ./image-downloader.sh&lt;/code&gt;". To do that job in 10 workers,
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen-parallel.sh -h
Parallel execution of a &lt;span class="nb"&gt;command&lt;/span&gt; using GNU screen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Usage: screen-parallel.sh &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARG...&lt;span class="o"&gt;]&lt;/span&gt;

    -c CONCURRENCY           &lt;span class="nb"&gt;set&lt;/span&gt; concurrency level &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    -i INPUT                 specify input data file
    -p                       send input to STDIN of COMMAND

    -d                       leave screen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; in detached state.

    -v                       verbose mode

If no input file specified, this program will create CONCURRENCY
windows, &lt;span class="k"&gt;then&lt;/span&gt; each window will execute COMMAND with ARGs.

Otherwise, input file will be splitted in CONCURRENCY parts, and
COMMAND will be executed per part.  If any of ARG is &lt;span class="s2"&gt;"{}"&lt;/span&gt;, &lt;span class="k"&gt;then&lt;/span&gt; it
will be substituted to the pathname of the part.  If there is none,
the pathname of the part will be appended to ARGs.

Example:

    &lt;span class="c1"&gt;# Split 'input.txt into 5 parts,&lt;/span&gt;
    &lt;span class="c1"&gt;# and execute "./process.sh -i PART-PATHNAME -v".&lt;/span&gt;
    screen-parallel.sh -i input.txt -c &lt;span class="m"&gt;5&lt;/span&gt; ./process.sh -i &lt;span class="o"&gt;{}&lt;/span&gt; -v

    &lt;span class="c1"&gt;# Run 3 instances of "standalone.sh -p"&lt;/span&gt;
    screen-parallel.sh -c &lt;span class="m"&gt;3&lt;/span&gt; ./standalone.sh -p

$ screen-parallel.sh -c &lt;span class="m"&gt;10&lt;/span&gt; -i images.lst -p ./image-downloader.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Option &lt;code&gt;-c 10&lt;/code&gt; means to specify the concurrency level to 10, and option
&lt;code&gt;-i images.lst&lt;/code&gt; means to use the input file, &lt;code&gt;images.lst&lt;/code&gt;, and option &lt;code&gt;-p&lt;/code&gt;
indicates that the each divided piece will be provides via STDIN to
the command process.
&lt;/p&gt;

&lt;p&gt;
The whole source code is provided in the &lt;a href="https://github.com/cinsk/screen-parallel/"&gt;GitHub repository&lt;/a&gt;. Feel free
to leave an issue there if you have any comment or suggestion. Thanks.
&lt;/p&gt;</description><category>parallel</category><category>screen</category><guid>http://www.cinsk.org/posts/screen-parallel-execution/index.html</guid><pubDate>Tue, 04 Dec 2012 08:00:00 GMT</pubDate></item><item><title>A tool for registering CouchDB design documents, couch-register-design</title><link>http://www.cinsk.org/posts/couchdb-register-design/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Whenever I experiment CouchDB, especially design documents, always I
feel unhandy to upload the document.
&lt;/p&gt;

&lt;p&gt;
For simple experiments, Futon (CouchDB web interface) is the easiest
solution. However, if you want to keep the changes systemically, or
if you want to use any version control system, you're on your own.
&lt;/p&gt;

&lt;p&gt;
The difficulty come from the format of the design document; CouchDB
wants you to specify javascript functions in JSON string. If you
decided not to use Futon, you'll escape your function in JSON string
by yourself.
&lt;/p&gt;

&lt;p&gt;
Worse, if your function is not valid, you'll realize after the
design document is uploaded.
&lt;/p&gt;

&lt;p&gt;
Precisely, I want a tool that:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;can add/update the design document from the sources that I provided,
&lt;/li&gt;
&lt;li&gt;can verify all javascript functions before uploading,
&lt;/li&gt;
&lt;li&gt;can upload attachment files.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
First, I tried to use CouchApp, but lack of the detailed guide makes
me gave up. Sorry CouchApp folks. :(
&lt;/p&gt;

&lt;p&gt;
Second, I wrote simple bash shell scripts to interact with CouchDB
with &lt;code&gt;curl(1)&lt;/code&gt;, to upload the document after escaping the function to
build JSON document. It was not simple to implement all the features
that I need, so I stopped.
&lt;/p&gt;

&lt;p&gt;
Third, I try to write the tool in Ruby, and try to use httpclient,
but I couldn't make httpclient works for HTTP client features like
multipart/form-data. (Mayhaps I didn't know how to use httpclient
fluently.) So I stopped again.
&lt;/p&gt;

&lt;p&gt;
Fourth, I realized that I spent too much time to write this
script. I don't want to dig the source of the httpclient, so I just
write small Ruby wrapper of &lt;code&gt;curl(1)&lt;/code&gt;, and made the tool, finally.
&lt;/p&gt;

&lt;p&gt;
If you have interest, visit couch-register-design and experiment.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./register-designs.rb -h
Usage: register-designs.rb &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; DIRECTORY

    -d, --database &lt;span class="o"&gt;[&lt;/span&gt;URL&lt;span class="o"&gt;]&lt;/span&gt;             CouchDB endpoint URL
				     &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="s2"&gt;"http://localhost:5984/sedis"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    -j, --jspath &lt;span class="o"&gt;[&lt;/span&gt;JS-PATH&lt;span class="o"&gt;]&lt;/span&gt;           Javascript interpreter
    -v, --verbose                    Verbose output

    -h, --help                       Show this message
    -V, --version                    Show version and &lt;span class="nb"&gt;exit&lt;/span&gt;

Register design documents from DIRECTORY where it contains
files &lt;span class="k"&gt;for&lt;/span&gt; the document.

  DIRECTORY/views/VIEW-NAME/*.js  &lt;span class="o"&gt;(&lt;/span&gt;e.g. map.js or reduce.js&lt;span class="o"&gt;)&lt;/span&gt;
  DIRECTORY/shows/*.js            &lt;span class="o"&gt;(&lt;/span&gt;e.g. print.js or others&lt;span class="o"&gt;)&lt;/span&gt;
  DIRECTORY/*.js                  &lt;span class="o"&gt;(&lt;/span&gt;e.g. validate_doc_update.js&lt;span class="o"&gt;)&lt;/span&gt;
  DIRCETORY/_attachments/*        &lt;span class="o"&gt;(&lt;/span&gt;automatically uploaded&lt;span class="o"&gt;)&lt;/span&gt;

Report bugs to &amp;lt;cinsky at gmail.com&amp;gt; or post bugs to
  &amp;lt;https://github.com/cinsk/couch-register-design/issues&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>couchdb</category><category>tool</category><guid>http://www.cinsk.org/posts/couchdb-register-design/index.html</guid><pubDate>Sun, 11 Nov 2012 08:00:00 GMT</pubDate></item><item><title>Wait until TCP port opened using bash and nc</title><link>http://www.cinsk.org/posts/bash-wait-tcp-port.org/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Recently, I wrote a shell script which interacts with a TCP
server. Since the script took charge of launching the server,
sometimes my script fails because the server did not open the socket
yet.
&lt;/p&gt;

&lt;p&gt;
To come up with this problem, I used to wait certain amount of time
using &lt;code&gt;sleep(1)&lt;/code&gt; like this:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# launch the server which automatically daemonizes itself.&lt;/span&gt;
start-server 

&lt;span class="c1"&gt;# one second is enough for my system.&lt;/span&gt;
sleep &lt;span class="m"&gt;1&lt;/span&gt;

client &lt;span class="k"&gt;do&lt;/span&gt; something
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
It was fine for my system, until I realized this method would not
work on slow machine. Worse, when my system in a heavy-load, my
system also failed to run above script successfully.
&lt;/p&gt;

&lt;p&gt;
I would solve this problem by raising the amount of seconds
sleeping, but I do not want to wait more on my relatively fast
system.
&lt;/p&gt;

&lt;p&gt;
Then I realized that netcat (a.k.a. &lt;code&gt;nc&lt;/code&gt;) provides such feature with
the "-z" option.
&lt;/p&gt;

&lt;p&gt;
To test whether &lt;code&gt;www.cinsk.org&lt;/code&gt; (TCP port 80) is opened, I can launch
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In BSD-like (MacOS) system&lt;/span&gt;
$ nc -z www.cinsk.org &lt;span class="m"&gt;80&lt;/span&gt;
Connection to www.cinsk.org &lt;span class="m"&gt;80&lt;/span&gt; port &lt;span class="o"&gt;[&lt;/span&gt;tcp/http&lt;span class="o"&gt;]&lt;/span&gt; succeeded!
$ _

&lt;span class="c1"&gt;# On my Linux system, no message but just return zero on success&lt;/span&gt;
$ nc -z www.cinsk.org &lt;span class="m"&gt;80&lt;/span&gt;
$ _
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then I found another problem. Suppose that the firewall drops all
packets for that port. Since by default, netcat(&lt;code&gt;nc&lt;/code&gt;) will wait
permanently until the port is open, the script that uses netcat(&lt;code&gt;nc&lt;/code&gt;)
will not return.
&lt;/p&gt;

&lt;p&gt;
Thanks to the rich interface of netcat, it provides another option
"-w" to specify the amount of time it will wait. The problem is,
MacOS nc (BSD) does not work with "-w" option if the firewall drops
all packets. Installing GNU version will solve this problem. (by the
command "&lt;code&gt;brew install netcat&lt;/code&gt;")
&lt;/p&gt;

&lt;p&gt;
Finally, I wrote wait4tcp.sh to lessen the burden for others.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Wait until port 80 8080 5984 are opened&lt;/span&gt;
$ ./wait4tcp.sh HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="m"&gt;5984&lt;/span&gt;

&lt;span class="c1"&gt;# The same as above, except it will retry only 10 times per each port.&lt;/span&gt;
$ ./wait4tcp.sh -w &lt;span class="m"&gt;10&lt;/span&gt; HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="m"&gt;5984&lt;/span&gt;

&lt;span class="c1"&gt;# Wait until port 80 is closed&lt;/span&gt;
$ ./wait4tcp.sh -c HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt;

&lt;span class="c1"&gt;# The same as above, except it will retry permanently.&lt;/span&gt;
$ ./wait4tcp.sh -w -1 -c HOSTNAME &lt;span class="m"&gt;80&lt;/span&gt;

&lt;span class="c1"&gt;# With the bash brace expansion, wait for port range 6379..6383 are opened&lt;/span&gt;
$ ./wait4tcp.sh HOSTNAME &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;..6383&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By default, wait4tcp.sh will retry 100 times per each port. Retrying
100 times is done less than 1 second in my system. Using "-w -1"
option will retry permanently.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Updated&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Recently, I read valuable article from &lt;a href="http://www.catonmat.net/blog/tcp-port-scanner-in-bash/"&gt;TCP Port Scanner in Bash&lt;/a&gt;,
and found that bash provides special filenames for redirections.
&lt;/p&gt;

&lt;p&gt;
As Peteris suggested, I changed to bash special filenames and
&lt;code&gt;timeout(1)&lt;/code&gt; so that there is no dependency to netcat(&lt;code&gt;nc&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Here is the full source code for &lt;code&gt;wait4tcp.sh&lt;/code&gt;:
&lt;/p&gt;

&lt;script src="https://gist.github.com/3769111.js"&gt; &lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bash</category><category>nc</category><category>netcat</category><category>tcp</category><guid>http://www.cinsk.org/posts/bash-wait-tcp-port.org/index.html</guid><pubDate>Sun, 23 Sep 2012 08:00:00 GMT</pubDate></item></channel></rss>