<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Seong-Kook Shin's Little World (emacs에 대한 포스트)</title><link>http://www.cinsk.org/</link><description></description><atom:link href="http://www.cinsk.org/ko/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>ko</language><copyright>Contents © 2018 &lt;a href="mailto:cinsky at gmail.com"&gt;Seong-Kook Shin&lt;/a&gt; </copyright><lastBuildDate>Tue, 06 Mar 2018 07:25:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Easy way to resize/select windows or frames of Emacs</title><link>http://www.cinsk.org/ko/posts/emacs-resize-windows-frames/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Window/Frame Selection&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
When you're using Emacs in a graphic display (That is, not in a
console nor a terminal), you'll have multiple Emacs frames and windows
in them.
&lt;/p&gt;

&lt;p&gt;
The default navigation interface of Emacs is quite surprising to the non
Emacs users since Emacs provides relative selection machanism.
&lt;/p&gt;

&lt;p&gt;
For example, suppose you have following Emacs frames and windows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;pre&amp;gt;
+-Frame A------------+   +-Frame B------------+   +-Frame C------------+
|                    |   |                    |   |                    |
| Window A           |   | Window C           |   | Window F           |
|                    |   |                    |   |                    |
|                    |   +--------------------+   |                    |
|                    |   |                    |   |                    |
+--------------------+   | Window D           |   |                    |
|                    |   |                    |   |                    |
| Window B           |   |                    |   |                    |
|                    |   +--------------------+   |                    |
|                    |   |                    |   |                    |
|                    |   | Window E           |   |                    |
+--------------------+   +--------------------+   +--------------------+
&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Emacs provides basic frame selection and window selection commands;
&lt;code&gt;other-frame&lt;/code&gt; and &lt;code&gt;other-window&lt;/code&gt;.  They select the next frame or next
window from the list in cyclic order.  The problem is, the default
order may not reflect the coordinates of the frame/window, especially
when you moved some frames/windows.
&lt;/p&gt;

&lt;p&gt;
Suppose that the currently selected frame is &lt;i&gt;Frame B&lt;/i&gt; in above figure.
If Emacs kept the frame list in &lt;code&gt;(Frame#B Frame#A Frame#C)&lt;/code&gt;, the next frame
would be &lt;i&gt;Frame A&lt;/i&gt;.  Of course, by using negative prefix argument to
&lt;code&gt;other-frame&lt;/code&gt; function, you can select the previous frame if you want.
&lt;/p&gt;

&lt;p&gt;
What I want is, to select a frame in the order of the actual
coordinate of the frames.  That is, I want to give a command something
like, "select the frame where its X coordinate is the closest to the
origin.", or "select the frame where its X coordinate is the second
closest to the origin.".
&lt;/p&gt;

&lt;p&gt;
So I made a simple function, &lt;code&gt;wfu/frame-list-ordered&lt;/code&gt;, to return an
ordered list of frames.  Similarly, I made another function,
&lt;code&gt;wfu/window-list-ordered&lt;/code&gt;, to return an ordered list of windows.
Using these two functions, I made two commands;
&lt;code&gt;wfu/other-frame-or-window&lt;/code&gt; and &lt;code&gt;wfu/other-window-or-frame&lt;/code&gt;.
&lt;code&gt;wfu/other-frame-or-window&lt;/code&gt; will select other(next) frame.  If there
is no other frame, it will select other(next) window.  Similarly,
&lt;code&gt;wfu/other-window-or-frame&lt;/code&gt; will select other(next) window.  If there
is no other window, it will select other(next) frame.
&lt;/p&gt;

&lt;p&gt;
Binding a key shortcut to an Emacs command is treaky thing.  Since you
don't know that whether you can easily memorize new keybindings.
Anyway, I found following key sequences are best for my personal use:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Keys&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;C-&amp;lt;tab&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;bound to &lt;code&gt;wfu/other-window-or-frame&lt;/code&gt;, it selects the next window of the current frame.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;C-N C-&amp;lt;tab&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;Select the N-th window of the current frame.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;C-- C-N C-&amp;lt;tab&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;Select the N-th frame.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;code&gt;C-x o&lt;/code&gt;&lt;/td&gt;
&lt;td class="left"&gt;bound to &lt;code&gt;wfu/other-frame-or-window&lt;/code&gt;, it selects the next frame.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
&lt;code&gt;N&lt;/code&gt; is the number between 0 and 9.  Note first window/frame starts from
1, not 0. 
&lt;/p&gt;

&lt;p&gt;
Normally, I just stick to &lt;code&gt;C-&amp;lt;tab&amp;gt;&lt;/code&gt; to select other window.  When I
want to select other frame, I'll feed it a negative number; where the
absolute value of the number denotes the N-th frame.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Source&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
You may download &lt;a href="https://github.com/cinsk/emacs-scripts/blob/master/wfutils.el"&gt;wfutils.el&lt;/a&gt; from the &lt;a href="https://github.com/cinsk/emacs-scripts/"&gt;github&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-resize-windows-frames/index.html</guid><pubDate>Sat, 30 Nov 2013 08:00:00 GMT</pubDate></item><item><title>How I measured Emacs init script performance</title><link>http://www.cinsk.org/ko/posts/emacs-uinit-measure-performance/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Background&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
How did I load lots of init scripts?
&lt;/p&gt;

&lt;p&gt;
If you're like me, you have a lot of elisp files for your Emacs
configuration.  Without considering unmaintained code or junk codes, I
have almost 80 elisp files in my &lt;code&gt;$HOME/.emacs.d/&lt;/code&gt;.
This causes Emacs launching slower and slower.  Normally, I don't turn-off
my computer, nor I need to launch Emacs frequently.  So it was not big deal.
&lt;/p&gt;

&lt;p&gt;
However, sometimes it took more than 7 seconds to launch Emacs on my
idle Gentoo machine.  Why it took so much time before starting?  Which
file is the time-consuming monster?  Unfortunately, I couldn't answer.
&lt;/p&gt;

&lt;p&gt;
So I tried to clean-up my configurations.  First, I remove all unused
junk from my &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;.  Even after that, my init file
was too big to maintain easily.  So I modulize the init file into
separate code pieces.  Now, there is just a small &lt;code&gt;init.el&lt;/code&gt;, and lots of
code pieces reside in &lt;code&gt;$HOME/.emacs.d/init/&lt;/code&gt;.  For example, my
customization for &lt;span class="underline"&gt;dired&lt;/span&gt; package is stored in
&lt;code&gt;$HOME/.emacs.d/init/dired.el&lt;/code&gt;, and Korean language customization is
stored in &lt;code&gt;$HOME/.emacs.d/init/dired.el&lt;/code&gt;, and so on.
&lt;/p&gt;

&lt;p&gt;
After that, I wrote simple macro, which loads the init code pieces from the
specified directory, &lt;code&gt;$HOME/.emacs.d/init/&lt;/code&gt;, if it was not loaded
before, much like Emacs's &lt;code&gt;require&lt;/code&gt; function.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;uinit/load&lt;/span&gt; &lt;span class="s"&gt;"korean"&lt;/span&gt; &lt;span class="nv"&gt;enable-multibyte-characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You can interpret above code as "If &lt;code&gt;enable-multibyte-characters&lt;/code&gt; is
not nil, load &lt;code&gt;$HOME/.emacs.d/init/korean.el&lt;/code&gt;, if it was not loaded
before."
&lt;/p&gt;

&lt;p&gt;
In detail, &lt;code&gt;uinit/load&lt;/code&gt; function will search whether the given code piece
(e.g. &lt;code&gt;Korean.el&lt;/code&gt; in above) is loaded before, by searching the list
&lt;code&gt;uinit/loaded-init-files&lt;/code&gt;.  Then if it does not exists, it call call
&lt;code&gt;load&lt;/code&gt; function to load the file.  It also record the duration time of
loading the piece, and save it in to the report buffer, "&lt;code&gt;*uinit*&lt;/code&gt;".
&lt;/p&gt;

&lt;p&gt;
After my &lt;code&gt;init.el&lt;/code&gt; is loaded by Emacs, it will repeatedly call
&lt;code&gt;uinit/load&lt;/code&gt; to load lots of init code pieces, saving the timing of loading
in "&lt;code&gt;*uinit*&lt;/code&gt;" buffer.  In the end of &lt;code&gt;init.el&lt;/code&gt; file, I call
&lt;code&gt;uinit/summarize&lt;/code&gt; so that it will sort &lt;code&gt;*uinit*&lt;/code&gt; buffer by the
consumed time, and wrote the total amount of time to load my init
code pieces.  Here's the screenshot of &lt;code&gt;*uinit*&lt;/code&gt; buffer:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="http://www.cinsk.org/images/emacs-uinit-measure-performance.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Usage&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
You can grab the source of &lt;i&gt;uinit&lt;/i&gt; package from &lt;a href="https://github.com/cinsk/emacs-scripts/blob/master/uinit.el"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Your emacs init script (&lt;code&gt;$HOME/.emacs&lt;/code&gt; or &lt;code&gt;$HOME/.emacs.d/init.el&lt;/code&gt;)
modifies &lt;code&gt;load-path&lt;/code&gt;, You must set &lt;code&gt;load-path&lt;/code&gt; before using any of
function in &lt;i&gt;uinit&lt;/i&gt; because &lt;i&gt;uinit&lt;/i&gt; will try to byte compile your init
pieces on load.  Otherwise byte compilation will fail.    Especially,
if you're using &lt;i&gt;package&lt;/i&gt;,  try to call &lt;code&gt;(package-initialize)&lt;/code&gt; before
loading &lt;i&gt;uinit&lt;/i&gt;.  For example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;locate-library&lt;/span&gt; &lt;span class="s"&gt;"package"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;uinit/init-directory&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/init"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'uinit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, you're free to call &lt;code&gt;uinit/load&lt;/code&gt; to load your init code pieces.
(Your init code pieces should be placed in &lt;code&gt;uinit/init-directory&lt;/code&gt;.)
For example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;uinit/load&lt;/span&gt; &lt;span class="s"&gt;"darwin"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;system-type&lt;/span&gt; &lt;span class="ss"&gt;'darwin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;uinit/load&lt;/span&gt; &lt;span class="s"&gt;"X"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;window-system&lt;/span&gt; &lt;span class="ss"&gt;'x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Finally, add following code in the end of your init.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;uinit/summarize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-uinit-measure-performance/index.html</guid><pubDate>Thu, 21 Nov 2013 08:00:00 GMT</pubDate></item><item><title>Emacs python-mode and ipython on Mac, Mountain Lion</title><link>http://www.cinsk.org/ko/posts/emacs-python-ipython-mac-mountainlion/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Recently, I found that ipython in my mac (mountain lion) does not work
correctly in Emacs python-mode. There are two possible causes: first, In mountain lion, the
shipped python (version 2.7.2) contains readline support, which is
broken (according to ipython 0.13.1 warning message).  You need to
install fresh readline using (Note that &lt;code&gt;pip&lt;/code&gt; does not help in this
case):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo python easy_install readline
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Second, Emacs python-mode (6.0.10) and ipython prompt does not along well each other.
With the new readline installation, and with few experiments,
classic python prompt (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) works well.  
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq-default&lt;/span&gt; &lt;span class="nv"&gt;py-shell-name&lt;/span&gt; &lt;span class="s"&gt;"ipython"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq-default&lt;/span&gt; &lt;span class="nv"&gt;python-python-command-args&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-i"&lt;/span&gt; &lt;span class="s"&gt;"--classic"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you're like me, you want &lt;code&gt;C-a&lt;/code&gt; will adhere the python
prompt. (Specifically, you want &lt;code&gt;C-a&lt;/code&gt; will move the point right after
the prompt string, not the real beginning of the line).  To do that,
add following:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;boundp&lt;/span&gt; &lt;span class="ss"&gt;'py-shell-map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;null&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lookup-key&lt;/span&gt; &lt;span class="nv"&gt;py-shell-map&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?a&lt;/span&gt;&lt;span class="p"&gt;)])))&lt;/span&gt;
  &lt;span class="c1"&gt;;; `move-beginning-of-line' (C-a) ignore the prompt, which is&lt;/span&gt;
  &lt;span class="c1"&gt;;; inconvinient.&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;py-shell-map&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;control&lt;/span&gt; &lt;span class="nv"&gt;?a&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="ss"&gt;'comint-bol-or-process-mark&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-python-ipython-mac-mountainlion/index.html</guid><pubDate>Mon, 11 Mar 2013 07:00:00 GMT</pubDate></item><item><title>Emacs Mail Address Completion</title><link>http://www.cinsk.org/ko/posts/emacs-mail-address-completion/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
I don't use Emacs for reading mails. All of my mail servers uses IMAP,
and for productivity, Emacs as a mail client is too slow. It's kind of
sad.  However, sending e-mail in Emacs (M-x mail) speed up my daily
work greatly. Normally, I discuss some code within Emacs, and for the
reference, I send the code fragment or org file to the
discussioners. ('discussioner' is not an English word. I don't know
any word for it.)
&lt;/p&gt;

&lt;p&gt;
The problem is, I usually don't remember mail address for
people. Had I used graphical mail agent such as thunderbird or
outlook, I would be pleased to see the auto-completion feature of
them. But no such luck in Emacs. (Yes I know there are couple of
Emacs packages that analyze mail boxes to extract the mail
addresses, but none makes me comfortable enough. Those who want it
anyway, see &lt;a href="http://bbdb.sourceforge.net/"&gt;BBDB&lt;/a&gt;)
&lt;/p&gt;

&lt;p&gt;
All I want is, to use my gmail contacts as address completing
candidates.
&lt;/p&gt;

&lt;p&gt;
So I wrote very simple Ruby script, to extract the contact
information from my gmail account, and save it as contacts.el using
following command:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.emacs.d
$ ./gcontact.el MY-GMAIL-ACCOUNT@gmail.com
password: ********
$ _
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then add following code to your init script:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;complete-contact-address-internal&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;completing-read&lt;/span&gt; &lt;span class="s"&gt;"address: "&lt;/span&gt;
			       &lt;span class="nv"&gt;my-google-contacts&lt;/span&gt;
			       &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;'confirm&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;"@"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="nv"&gt;name&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;found&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;my-google-contacts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nam&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;"\\(.*?\\) *([^)]*) *$"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		   &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"%s &amp;lt;%s&amp;gt;"&lt;/span&gt; &lt;span class="nv"&gt;nam&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;complete-contact-address&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"P"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;address&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;complete-contact-address-internal&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;save-restriction&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;save-match-data&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-forward&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;regexp-quote&lt;/span&gt; &lt;span class="nv"&gt;mail-header-separator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;header-sep&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;= &lt;/span&gt;&lt;span class="nv"&gt;pos&lt;/span&gt; &lt;span class="nv"&gt;header-sep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-forward&lt;/span&gt; &lt;span class="s"&gt;"^To:"&lt;/span&gt; &lt;span class="nv"&gt;header-sep&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="nv"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-forward&lt;/span&gt; &lt;span class="s"&gt;"^[^[:blank:]][^:]*:[[:blank:]]*$"&lt;/span&gt;
				     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;line-end-position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-forward&lt;/span&gt; &lt;span class="s"&gt;"^[[:blank:]]+$"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;line-end-position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;beginning-of-line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-forward&lt;/span&gt; &lt;span class="s"&gt;"[,[:blank:]]*$"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;line-end-position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;", %s"&lt;/span&gt; &lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eval-after-load&lt;/span&gt; &lt;span class="s"&gt;"sendmail"&lt;/span&gt;
  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;progn&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;mail-mode-map&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;meta&lt;/span&gt; &lt;span class="nv"&gt;return&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ss"&gt;'complete-contact-address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;contacts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-name-as-directory&lt;/span&gt; &lt;span class="nv"&gt;user-emacs-directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			     &lt;span class="s"&gt;"contacts.el"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-exists-p&lt;/span&gt; &lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load-file&lt;/span&gt; &lt;span class="nv"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
When writing e-mail in Emacs using M-x mail, press M-RET to
auto-completing mail address.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="http://www.cinsk.org/images/emacs-mail-address-completion.png" alt="Emacs mail address completion"&gt;
&lt;/p&gt;

&lt;p&gt;
Listing of gcontract.rb:
&lt;/p&gt;

&lt;script src="http://gist-it.appspot.com/github/cinsk/emacs-scripts/raw/master/gcontact.rb"&gt;&lt;/script&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-mail-address-completion/index.html</guid><pubDate>Tue, 16 Oct 2012 08:00:00 GMT</pubDate></item><item><title>Emacs ruby-mode and RVM propmt</title><link>http://www.cinsk.org/ko/posts/emacs-ruby-rvm-prompt/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
On emacs ruby-mode, if you do &lt;code&gt;M-x run-ruby&lt;/code&gt; (or
&lt;code&gt;C-c C-s&lt;/code&gt;), the inferior ruby interpreter is provided in
the "&lt;code&gt;*ruby*&lt;/code&gt;" buffer so that you can evaluate lots of ruby
statements or expressions.
&lt;/p&gt;

&lt;p&gt;
When you press &lt;code&gt;M-p&lt;/code&gt; (&lt;code&gt;M-x comint-previous-input&lt;/code&gt;), Emacs will cycle to
the previous input histrory saving input, so that you can easily
re-evaulate of your previous input.
&lt;/p&gt;

&lt;p&gt;
It works like other inferior interpreter provided by python-mode,
slime, and so on.
&lt;/p&gt;

&lt;p&gt;
What makes me frustrated is, it works for the ruby 1.8 installed in
my gentoo system, but it does not work for the ruby 1.9.3 installed
via RVM. The minibuffer shows sulpurous error:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="no"&gt;Search&lt;/span&gt; &lt;span class="ss"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^irb(.*)[0-9:]+0&amp;gt; *"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Looking at the ruby-mode's source, I found that string is the value
of '&lt;code&gt;inferior-ruby-first-prompt-pattern&lt;/code&gt;' in &lt;code&gt;inf-ruby.el&lt;/code&gt;. It looks
like that ruby-mode uses &lt;code&gt;inferior-ruby-first-prompt-pattern&lt;/code&gt; and
&lt;code&gt;inferior-ruby-prompt-pattern&lt;/code&gt; for the ruby's prompt pattern.
&lt;/p&gt;

&lt;p&gt;
Another notable different from the start between two rubies (v1.8
system versus v1.9 RVM) are their prompt patterns:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ruby 1.8 (system)&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="c1"&gt;# ruby 1.9.3 (RVM)&lt;/span&gt;
&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p180&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now it's clear who is the culprit. Due to the difference of the
prompt pattern, ruby-mode could not provide me &lt;code&gt;M-p&lt;/code&gt; or &lt;code&gt;M-n&lt;/code&gt; working.
&lt;/p&gt;

&lt;p&gt;
So I modified two variables in &lt;code&gt;inf-ruby.el&lt;/code&gt; and reports a bug to the
Ruby issue tracking system and got a quick response.
&lt;/p&gt;

&lt;p&gt;
It turns out that it's not the fault of ruby-mode, but it's the
fault of RVM. (Actually, it's not a defect. It just not right for my
purpose.)
&lt;/p&gt;

&lt;p&gt;
By default, RVM uses different prompt from the native ruby. To solve
this, you can force RVM ruby (irb) to use the native prompt
pattern. It's simple: modify &lt;code&gt;$HOME/.irbrc&lt;/code&gt; to include following:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="no"&gt;IRB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:PROMPT_MODE&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:DEFAULT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I feel embbarassed that I blamed ruby-mode when I found something is
wrong :(
&lt;/p&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-ruby-rvm-prompt/index.html</guid><pubDate>Fri, 31 Aug 2012 08:00:00 GMT</pubDate></item><item><title>OS X Emacs 24.1 Fontset revised</title><link>http://www.cinsk.org/ko/posts/emacs-darwin-fontset/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Whenever I installed new Emacs version, the init script for fontset
turned out not working.  It is sad that even now Emacs fontset related API is somewhat
unstable. I cannot blame Emacs developers for this. Part of the
reason is there are so many bad font (esp. Korean font) which works
very poorly on non-Windows machines.
&lt;/p&gt;

&lt;p&gt;
Anyway, the script in &lt;a href="file:///posts/emacs-smart-ediff/index.html"&gt;my previous post&lt;/a&gt; does not work with the stable
24.1 binary from &lt;a href="http://emacsformacosx.com/"&gt;EmacsForMacOsX&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here are working version of Emacs snippet that uses different font
for multiple charset:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;system-type&lt;/span&gt; &lt;span class="ss"&gt;'darwin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;;; These configuration seems to work in&lt;/span&gt;
  &lt;span class="c1"&gt;;; GNU Emacs 24.1.1 (x86_64-apple-darwin, NS apple-appkit-1038.36)&lt;/span&gt;
  &lt;span class="c1"&gt;;; of 2012-06-11 on bob.porkrind.org&lt;/span&gt;

  &lt;span class="c1"&gt;;; default font family&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-attribute&lt;/span&gt; &lt;span class="ss"&gt;'default&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;:family&lt;/span&gt; &lt;span class="s"&gt;"Consolas"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;;; default font size&lt;/span&gt;
  &lt;span class="c1"&gt;;;&lt;/span&gt;
  &lt;span class="c1"&gt;;; WARNING: depending on the default font, some height value may&lt;/span&gt;
  &lt;span class="c1"&gt;;; cause a broken frame display; that is, the beginning of the &lt;/span&gt;
  &lt;span class="c1"&gt;;; buffer is not visible.&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-attribute&lt;/span&gt; &lt;span class="ss"&gt;'default&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;:height&lt;/span&gt; &lt;span class="mi"&gt;165&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;;; You may add :size POINT in below font-spec if you want to use&lt;/span&gt;
  &lt;span class="c1"&gt;;; specific size of Hangul font regardless of default font size&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-fontset-font&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="ss"&gt;'hangul&lt;/span&gt;
		    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-spec&lt;/span&gt; &lt;span class="nv"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"NanumGothicCoding"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Height 165 seems to work well with "Consolas" font.
&lt;/p&gt;

&lt;p&gt;
Yes! The height is 165 (about 16 pt). As I'm growing old, I cannot
use smaller font size any more. It sucks! Anyway, here is the
screenshot with the above setting:
&lt;/p&gt;

&lt;p&gt;
[[&lt;img src="http://www.cinsk.org/images/emacs-darwin-fontset.png" alt="nil"&gt;]
&lt;/p&gt;

&lt;p&gt;
I tried with several fonts such as Monaco, Andale Mono, and so on
but I found Consolas is superior among others (this is my biased
opinion, of course.)
&lt;/p&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-darwin-fontset/index.html</guid><pubDate>Tue, 10 Jul 2012 08:00:00 GMT</pubDate></item><item><title>Smart ediff widen frame on Emacs</title><link>http://www.cinsk.org/ko/posts/emacs-smart-ediff/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
One of the reason that I love Emacs is the ediff package, which
provides nice diff interface that I cannot find similar feature in
other editors. Here are some screenshots of sample ediff session:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="http://www.cinsk.org/images/ediff-1.png" alt="Ediff Example 1"&gt;
&lt;img src="http://www.cinsk.org/images/ediff-2.png" alt="Ediff Example 2"&gt;
&lt;/p&gt;

&lt;p&gt;
The first one (on left-side) uses the default split, called
&lt;i&gt;vertical split&lt;/i&gt;, and the second one (on the right-side) is called
&lt;i&gt;horizontal split&lt;/i&gt;. You can switch back and force using &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;M-x
ediff-toggle-split&lt;/code&gt; command in the ediff control buffer. As you can
see here, the horizontal split looks much more readable. One
problem, though. Normally, I uses 80 character width for a emacs
frame. If I choose to use the horizontal split, it automatically
split the windows in the 80-char-width frame, so that each window
will have about 40 characters. (Actually, depending on the width of
the scroll bar and the internal borders, it will be smaller than 40
characters).
&lt;/p&gt;

&lt;p&gt;
Around a couple of years ago, I wrote custom hook function to
automatically widen the frame on the "horizontal split" and restore
to the original frame width when ediff session finished. What makes
me to feel stupid is, Ediff has already provided that feature years
ago. If you use &lt;code&gt;m&lt;/code&gt; or &lt;code&gt;M-x ediff-toggle-wide-display&lt;/code&gt; on the ediff
control buffer, the frame width will span to that of the display.
&lt;/p&gt;

&lt;p&gt;
One problem is, I use two LCD minitor, combined into one X display
(using nvidia's TwinView feature). Each monitor supports 1920x1080,
so my X window system provides 3840x1080 display. That means, if I
call &lt;code&gt;ediff-toggle-wide-display&lt;/code&gt;, the screen will look like:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="http://www.cinsk.org/images/ediff-widen-display.png" alt="Ediff Wide Display"&gt;
&lt;/p&gt;

&lt;p&gt;
As you can see, this is unacceptable. So, again, I need to modify
the configuration little bit, so that it will widen the frame in a
reasonable amount.
&lt;/p&gt;

&lt;p&gt;
Let's find out which code should be modified. On the ediff control
buffer, &lt;code&gt;C-h k m&lt;/code&gt; shows that the &lt;code&gt;m&lt;/code&gt; command is binded to
&lt;code&gt;ediff-toggle-wide-display&lt;/code&gt; in &lt;code&gt;ediff-util.el&lt;/code&gt;. After reading the
function code, &lt;code&gt;ediff-toggle-wide-display&lt;/code&gt; will call the function in
the value of &lt;code&gt;ediff-make-wide-display-function&lt;/code&gt;, which is set to
&lt;code&gt;ediff-make-wide-display&lt;/code&gt; by default. This means that, if I write my
own function that does the job of &lt;code&gt;ediff-make-wide-display&lt;/code&gt;, problem
will be solved! Yeah~
&lt;/p&gt;

&lt;p&gt;
But what makes me troubled is, it is not straight-forward to
determine the 'reasonable amount of frame width. Several ideas come
up to my mind:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Normally, most people prefer 80 character width for a window. What
about &lt;code&gt;80 * 2 = 160&lt;/code&gt; for the widened frame? — No, using hard-coded
value is always a bad choice.
&lt;/li&gt;
&lt;li&gt;Each buffer can have its own &lt;code&gt;fill-column&lt;/code&gt; value, which is 70 by
default. What about to use &lt;code&gt;fill-column * 2&lt;/code&gt;? — No, probably using
the previous width of the windows is the better.
&lt;/li&gt;
&lt;li&gt;Ediff provides 2 way diff or 3 way diff job. Merely doubling the
width is not good. Depending 2-way-diff or 3-way-diff, I might
need to multiply by two or by three.
&lt;/li&gt;
&lt;li&gt;In any case, user might want to use specific width. It will be
handy, if &lt;code&gt;m&lt;/code&gt; command can have prefix value for the exact width of
the window. For example, &lt;code&gt;160m&lt;/code&gt; will set window width to 160, so
that total frame width will be &lt;code&gt;160 * 2 = 320&lt;/code&gt; character width.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
To provide the prefix value, I need to wrap the
&lt;code&gt;ediff-toggle-wide-display&lt;/code&gt; with my own advice function:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;ediff-toggle-wide-display&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;around&lt;/span&gt; &lt;span class="nv"&gt;cinsk/ad-ediff-toggle-wide-display&lt;/span&gt;
					     &lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;w&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;prefix-numeric-value&lt;/span&gt; &lt;span class="nv"&gt;current-prefix-arg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;min-width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;window-live-p&lt;/span&gt; &lt;span class="nv"&gt;ediff-window-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;ediff-split-window-function&lt;/span&gt; 
				  &lt;span class="ss"&gt;'split-window-vertically&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			      &lt;span class="c1"&gt;;; ediff windows splitted like A/B&lt;/span&gt;
			      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window-width&lt;/span&gt; &lt;span class="nv"&gt;ediff-window-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			    &lt;span class="c1"&gt;;; ediff windows splitted like A|B&lt;/span&gt;
			    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window-frame&lt;/span&gt; &lt;span class="nv"&gt;ediff-window-A&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
			 &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;buffer-live-p&lt;/span&gt; &lt;span class="nv"&gt;ediff-buffer-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;buffer-local-value&lt;/span&gt; &lt;span class="ss"&gt;'fill-column&lt;/span&gt;
					      &lt;span class="nv"&gt;ediff-buffer-A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max &lt;/span&gt;&lt;span class="nv"&gt;fill-column&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max &lt;/span&gt;&lt;span class="nv"&gt;min-width&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"width: %S"&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;cinsk/ediff-wide-window-width&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="nv"&gt;ad-do-it&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ad-activate&lt;/span&gt; &lt;span class="ss"&gt;'ediff-toggle-wide-display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Since advice function cannot change the function interface of the
advised function, I'm not sure if I can use &lt;code&gt;current-prefix-arg&lt;/code&gt; in
the advice function like above. One more bad design is, above code
relies on the dynamic binding of the local variable,
&lt;code&gt;cinsk/ediff-wide-window-width&lt;/code&gt;. Anyway it works as I expected. :)
&lt;/p&gt;

&lt;p&gt;
For the &lt;code&gt;ediff-make-wide-display-function&lt;/code&gt;, I'll use following
function instead of genuine one:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;cinsk/ediff-make-wide-display&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Construct an alist of parameters for the wide display.&lt;/span&gt;
&lt;span class="s"&gt;Saves the old frame parameters in `ediff-wide-display-orig-parameters'.&lt;/span&gt;
&lt;span class="s"&gt;The frame to be resized is kept in `ediff-wide-display-frame'.&lt;/span&gt;
&lt;span class="s"&gt;This function modifies only the left margin and the width of the display.&lt;/span&gt;
&lt;span class="s"&gt;It assumes that it is called from within the control buffer."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;'ediff-display-pixel-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt; &lt;span class="s"&gt;"Can't determine display width"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let* &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;frame-A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;window-frame&lt;/span&gt; &lt;span class="nv"&gt;ediff-window-A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-A-params&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-parameters&lt;/span&gt; &lt;span class="nv"&gt;frame-A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-width&lt;/span&gt; &lt;span class="nv"&gt;frame-A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fpw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frame-pixel-width&lt;/span&gt; &lt;span class="nv"&gt;frame-A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ediff-frame-char-width&lt;/span&gt; &lt;span class="nv"&gt;frame-A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;febw&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="c1"&gt;; frame external border width&lt;/span&gt;
	 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fibw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;fpw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;fw&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;       &lt;span class="c1"&gt;; frame internal border width&lt;/span&gt;
	 &lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;desired-fpw&lt;/span&gt; &lt;span class="nv"&gt;desired-left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ediff-wide-display-orig-parameters&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons &lt;/span&gt;&lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eval &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc &lt;/span&gt;&lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="nv"&gt;frame-A-params&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons &lt;/span&gt;&lt;span class="ss"&gt;'width&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc &lt;/span&gt;&lt;span class="ss"&gt;'width&lt;/span&gt; &lt;span class="nv"&gt;frame-A-params&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
   &lt;span class="nv"&gt;ediff-wide-display-frame&lt;/span&gt; &lt;span class="nv"&gt;frame-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;cinsk/ediff-wide-window-width&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;boundp&lt;/span&gt; &lt;span class="ss"&gt;'ediff-3way-job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;ediff-3way-job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
			    &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="c1"&gt;;; ensure that DESIRED-FW is smaller than the screen size&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;febw&lt;/span&gt; &lt;span class="nv"&gt;fibw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ediff-display-pixel-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ediff-display-pixel-width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fibw&lt;/span&gt; &lt;span class="nv"&gt;febw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="c1"&gt;;;(setq desired-fpw (+ (* desired-fw cw) fbw))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-fpw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eval &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc &lt;/span&gt;&lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="nv"&gt;frame-A-params&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;cinsk/ediff-wide-display-policy&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;fw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

	    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;cinsk/ediff-wide-display-policy&lt;/span&gt; &lt;span class="ss"&gt;'right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;                          &lt;span class="c1"&gt;; center&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;fw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

      &lt;span class="c1"&gt;;; ensure that the frame will be inside of the display border.&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;febw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;febw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fibw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;febw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ediff-display-pixel-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;desired-left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ediff-display-pixel-width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
				&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt; &lt;span class="nv"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fibw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="nv"&gt;febw&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;

    &lt;span class="c1"&gt;;; (message "resizing WIDTH to %S where LEFT to %S" desired-fw desired-left)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;modify-frame-parameters&lt;/span&gt;
     &lt;span class="nv"&gt;frame-A&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;desired-left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;width&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;desired-fw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;user-position&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Of course, I need to set &lt;code&gt;ediff-make-wide-display-function&lt;/code&gt; before
loading ediff module, so put below line in front of the init file:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ediff-make-wide-display-function&lt;/span&gt; &lt;span class="ss"&gt;'cinsk/ediff-make-wide-display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ediff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And if you want to restore to the previous frame configuration on
ediff exit, add following code:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'ediff-quit-hook&lt;/span&gt;
	      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;ediff-wide-display-p&lt;/span&gt;
		    &lt;span class="ss"&gt;'ediff-toggle-wide-display&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
You may also want to register above function &lt;code&gt;(lambda () ...)&lt;/code&gt; in
&lt;code&gt;ediff-suspend-hook&lt;/code&gt; if you want to restore the frame on ediff
suspension.
&lt;/p&gt;

&lt;p&gt;
If you want full source, check out my &lt;a href="https://github.com/cinsk/emacs-scripts/blob/master/snippets/ediff.el"&gt;github repository&lt;/a&gt;.
&lt;/p&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-smart-ediff/index.html</guid><pubDate>Thu, 26 Apr 2012 08:00:00 GMT</pubDate></item><item><title>Emacs, Mac, Fontset, Font and X resources</title><link>http://www.cinsk.org/ko/posts/emacs-mac-fontset/index.html</link><dc:creator>Seong-Kook Shin</dc:creator><description>&lt;p&gt;
Recently, I bought a macbook pro for my personal use.
As soon as it is delivered to my home, I installed Emacs 24.x, from
&lt;a href="http://emacsformacosx.com/"&gt;EmacsForMacOsX&lt;/a&gt;.  Normally, in my other computers, I use the version
23.x.  The reason that I installed unstable 24.x is, that I want to
use the package system (package.el) in my macbook.  It would be very
boring and tedious if I need to install all the packages that I want
to use like in my other Gentoo linux.
&lt;/p&gt;

&lt;p&gt;
For my Linux systems, I uses Korean and English fonts using Emacs's
X resource configuration.  For example,
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Emacs*Fontset-0:-*-DejaVu Sans Mono-*-*-*-*-14-*-*-*-*-*-fontset-dejavu14,\
	  latin:-*-DejaVu Sans Mono-*-*-*-*-14-*-*-*-*-*-*,\
	hangul:-*-NanumGothic_Coding-*-*-*-*-*-*-*-*-*-*-*
Emacs.Font: fontset-dejavu14
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
But in my macbook, it didn't work. The reason is, in Mac, the X
window system is not running by default. It seems that MacOS delays
loading X window system until the first X application starts. And it
takes a couple of seconds, which I don't like it. Of course, I could
force to load the X resource, by using &lt;code&gt;xrdb -merge
MY_EMACS_X_RESOURCE_FILE&lt;/code&gt; in my &lt;code&gt;.bash_profile&lt;/code&gt; but as I said
before, it took several seconds to load the X system.
&lt;/p&gt;

&lt;p&gt;
So, I want to set my fontset configuration in the startup lisp code
instead X resource file. With a few experiments, here are the
working version:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-fontset-font&lt;/span&gt; &lt;span class="s"&gt;"fontset-standard"&lt;/span&gt; &lt;span class="ss"&gt;'unicode&lt;/span&gt; 
		  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-spec&lt;/span&gt; &lt;span class="nv"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Consolas"&lt;/span&gt;
			     &lt;span class="nv"&gt;:weight&lt;/span&gt; &lt;span class="ss"&gt;'normal&lt;/span&gt;
			     &lt;span class="nv"&gt;:slant&lt;/span&gt; &lt;span class="ss"&gt;'normal&lt;/span&gt;
			     &lt;span class="nv"&gt;:size&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;; nil 'prepend)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-fontset-font&lt;/span&gt; &lt;span class="s"&gt;"fontset-standard"&lt;/span&gt; &lt;span class="ss"&gt;'hangul&lt;/span&gt;
		  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-spec&lt;/span&gt; &lt;span class="nv"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"NanumGothicCoding"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-font&lt;/span&gt; &lt;span class="ss"&gt;'default&lt;/span&gt; &lt;span class="s"&gt;"fontset-standard"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In addition to fontset configuration, there are a few more configuration for Mac.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;I want to use Command key as a meta key, since it's where the
Meta key should be.
&lt;/li&gt;
&lt;li&gt;I want to use Command-C to work as "copy the content to the
clipboard".  Since the Command key is meta key now, I want to
bind M-c to something that works like "copy the selection to the
clipboard for other application.".
&lt;/li&gt;
&lt;li&gt;I want to make Fn-Delete key as to delete right character.
&lt;/li&gt;
&lt;li&gt;I want to maintain one startup lisp code for all my Linux
machines and Macbook.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
With some help, here's the complete lisp code for Mac:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;system-type&lt;/span&gt; &lt;span class="ss"&gt;'darwin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;mac-option-modifier&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;mac-command-modifier&lt;/span&gt; &lt;span class="ss"&gt;'meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;;; sets fn-delete to be right-delete&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;kp-delete&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;'delete-char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-fontset-font&lt;/span&gt; &lt;span class="s"&gt;"fontset-standard"&lt;/span&gt; &lt;span class="ss"&gt;'unicode&lt;/span&gt; 
		    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-spec&lt;/span&gt; &lt;span class="nv"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"Consolas"&lt;/span&gt;
			       &lt;span class="nv"&gt;:weight&lt;/span&gt; &lt;span class="ss"&gt;'normal&lt;/span&gt;
			       &lt;span class="nv"&gt;:slant&lt;/span&gt; &lt;span class="ss"&gt;'normal&lt;/span&gt;
			       &lt;span class="nv"&gt;:size&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;; nil 'prepend)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-fontset-font&lt;/span&gt; &lt;span class="s"&gt;"fontset-standard"&lt;/span&gt; &lt;span class="ss"&gt;'hangul&lt;/span&gt;
		    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;font-spec&lt;/span&gt; &lt;span class="nv"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"NanumGothicCoding"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-face-font&lt;/span&gt; &lt;span class="ss"&gt;'default&lt;/span&gt; &lt;span class="s"&gt;"fontset-standard"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;display-graphic-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;meta&lt;/span&gt; &lt;span class="nv"&gt;?c&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ss"&gt;'ns-copy-including-secondary&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Finally! I can use Emacs with my custom preferences like in my Linux
machines. :)
&lt;/p&gt;

&lt;p&gt;
Note that this configuration worked on Emacs pretest binary 24.x
EmacsForMacOsX. As 24.1 is turned to the stable release, it suddenly
turned out not working! :(  Read on more &lt;a href="http://www.cinsk.org/2012/07/10/osx-emacs-fontset.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;</description><guid>http://www.cinsk.org/ko/posts/emacs-mac-fontset/index.html</guid><pubDate>Thu, 05 Apr 2012 08:00:00 GMT</pubDate></item></channel></rss>