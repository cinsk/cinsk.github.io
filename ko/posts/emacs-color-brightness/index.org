#+BEGIN_COMMENT
.. title: Determine brightness of colors in Emacs
.. slug: emacs-color-brightness
.. date: 2015-07-28 00:00:00 -08:00
.. tags: private, emacs, color, brightness
.. category: emacs
.. link: 
.. description: 
.. type: text
#+END_COMMENT

---
layout: post
title: "Check brightness and Emacs"
tags: [ "color", "rgb", "yiq", "brightness", "emacs" ]
published: false
---
{% include page_header.html %}
#+END_HTML

* Brightness and Colors

  

#+BEGIN_SRC emacs-lisp
  (defun color-brightness (color &optional frame)
    "Return the brightness (in YIQ color space) of COLOR, range [0, 256].

  COLOR should be a list of three integers, returned from `color-values'."
    (let* ((maxval (car (color-values "#ffffff")))
           (cvs (mapcar (lambda (x) (/ (* x 255) (float maxval))) color))
           (red (car cvs))
           (green (cadr cvs))
           (blue (caddr cvs)))
      (round (/ (+ (* red 299) (* green 587) (* blue 114)) 1000.0))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
   (defun list-colors-print (list &optional callback)
     (let ((callback-fn
            (if callback
                `(lambda (button)
                   (funcall ,callback (button-get button 'color-name))))))
       (dolist (color list)
         (if (consp color)
             (if (cdr color)
                 (setq color (sort color (lambda (a b)
                                           (string< (downcase a)
                                                    (downcase b))))))
           (setq color (list color)))
         (let* ((opoint (point))
                (color-values (color-values (car color)))
                (light-p (> (color-brightness color-values) 125)))
                
           (insert (car color))
           (indent-to 22)
           (put-text-property opoint (point) 'face
                              `(:background ,(car color)
                                :foreground ,(if light-p "black" "white")))
           (put-text-property
            (prog1 (point)
              (insert " ")
              ;; Insert all color names.
              (insert (mapconcat 'identity color ",")))
            (point)
            'face (list :foreground (car color)))
           (insert (propertize " " 'display '(space :align-to (- right 9))))
           (insert " ")
           (insert (propertize
                    (apply 'format "#%02x%02x%02x"
                           (mapcar (lambda (c) (lsh c -8))
                                   color-values))
                    'mouse-face 'highlight
                    'help-echo
                    (let ((hsv (apply 'color-rgb-to-hsv
                                      (color-name-to-rgb (car color)))))
                      (format "H:%.2f S:%.2f V:%.2f"
                              (nth 0 hsv) (nth 1 hsv) (nth 2 hsv)))))
           (when callback
             (make-text-button
              opoint (point)
              'follow-link t
              'mouse-face (list :background (car color)
                                :foreground (if light-p "black" "white"))
              'color-name (car color)
              'action callback-fn)))
         (insert "\n"))
       (goto-char (point-min))))
#+END_SRC
